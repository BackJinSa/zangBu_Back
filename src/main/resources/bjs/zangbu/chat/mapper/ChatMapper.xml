<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bjs.zangbu.chat.mapper.ChatMapper">

    <!-- 메시지 전송 시 db에 메시지 저장 -->
    <insert id="insertMessage">
        INSERT INTO chat_message (chat_room_id, building_id, member_id, complex_id, message, created_at)
        VALUES (#{chatRoomId}, #{buildingId}, #{senderId}, #{complexId}, #{message}, NOW())
        <selectKey resultType="long" keyProperty="chatMessageId" keyColumn="chat_message_id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!-- roomId를 기준으로 메시지 List 가져오기 -->
    <select id="selectMessagesByRoomId" resultType="bjs.zangbu.chat.vo.ChatMessage">
        SELECT chat_message_id, chat_room_id, building_id, member_id, complex_id, message, created_at
        FROM chat_message
        WHERE chat_room_id = #{chatRoomId}
        <!-- lastMessageId가 있으면 그 Id보다 작은 메시지들만 limit개씩 가져오기
        더보기 누르기 or 스크롤 시 limit개씩 더보기 -->
        <if test="lastMessageId != null">
            AND chat_message_id &lt; #{lastMessageId}
        </if>
        ORDER BY chat_message_id DESC
        LIMIT #{limit}
    </select>

    <!-- roomId를 기준으로 채팅방 상세 정보 가져오기 -->
    <select id="selectChatRoomById" resultType="bjs.zangbu.chat.vo.ChatRoom">
        SELECT chat_room_id, building_id, member_id, complex_id, seller_nickname, consumer_nickname
        FROM chat_room
        WHERE chat_room_id = #{chatRoomId}
    </select>

    <!-- 사용자의 채팅방 목록 조회 -->
    <select id="selectChatRoomList" resultType="bjs.zangbu.chat.vo.ChatRoom">
        SELECT cr.chat_room_id, cr.building_id, cr.member_id, cr.complex_id,
        cr.seller_nickname, cr.consumer_nickname
        FROM chat_room cr
        JOIN building b ON cr.building_id = b.building_id
        WHERE
        <choose>
            <!-- 구매자(BUYER)인 경우 ChatRoom 테이블에서 id-->
            <when test="type == 'BUYER'">
                cr.member_id = #{userId}
            </when>
            <!-- 판매자(SELLER)인 경우 building 테이블에서 id-->
            <when test="type == 'SELLER'">
                b.member_id = #{userId}
            </when>
        </choose>
        ORDER BY cr.chat_room_id DESC
        <!-- limit: 페이지 당 표시할 개수, offset: 건너뛸 개수(위치) = (page - 1) * size; -->
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 채팅방 유무 확인(중복 생성 방지: 매물 + 구매자 하나의 채팅방만 생기도록) -->
    <select id="existsChatRoom" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 FROM chat_room WHERE building_id = #{buildingId} AND member_id = #{consumerId}
        )
    </select>

    <!-- 채팅방 생성 -->
    <insert id="insertChatRoom">
        INSERT INTO chat_room (chat_room_id, building_id, member_id, complex_id, seller_nickname, consumer_nickname)
        VALUES (#{chatRoomId}, #{buildingId}, #{consumerId}, #{complexId}, #{sellerNickname}, #{consumerNickname})
    </insert>

    <!-- roomId에 해당하는 채팅방의 메시지들 모두 삭제(채팅방 삭제 전 메시지 먼저 삭제) -->
    <delete id="deleteMessagesByRoomId">
        DELETE FROM chat_message
        WHERE chat_room_id = #{chatRoomId}
    </delete>

    <!-- 채팅방 삭제 (해당 채팅방의 메시지들 삭제 우선되어야함: deleteMessagesByRoomId.)-->
    <delete id="deleteChatRoom">
        DELETE FROM chat_room WHERE chat_room_id = #{chatRoomId}
    </delete>

</mapper>