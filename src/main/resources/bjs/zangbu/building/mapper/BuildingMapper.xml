<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bjs.zangbu.building.mapper.BuildingMapper">

    <!-- 매물 등록 및 building_id 반환 -->
    <insert id="createBuilding">
        INSERT INTO building (
        seller_nickname,
        sale_type,
        price,
        deposit,
        bookmark_count,
        created_at,
        building_name,
        seller_type,
        property_type,
        move_date,
        info_oneline,
        info_building,
        image_url,
        contact_name,
        contact_phone,
        facility,
        member_id,
        complex_id
        )
        VALUES (
        #{sellerNickname},
        #{saleType},
        #{price},
        #{deposit},
        #{bookmarkCount},
        #{createdAt},
        #{buildingName},
        #{sellerType},
        #{propertyType},
        #{moveDate},
        #{infoOneline},
        #{infoBuilding},
        #{imageUrl},
        #{contactName},
        #{contactPhone},
        #{facility},
        #{memberId},
        #{complexId}
        )

        <!-- Auto increment된 building_id 반환 -->
        <selectKey
                resultType="Long"
                keyProperty="buildingId"
                keyColumn="building_id"
                order="AFTER"
        >
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!-- 찜 수 증가 -->
    <update id="incrementBookmarkCount">
        UPDATE building
        SET bookmark_count = IFNULL(bookmark_count, 0) + 1
        WHERE building_id = #{buildingId}
    </update>

    <!-- 찜 수 감소 -->
    <update id="decrementBookmarkCount">
        UPDATE building
        SET bookmark_count = IFNULL(bookmark_count, 0) - 1
        WHERE building_id = #{buildingId}
    </update>

    <!-- building_id로 매물 삭제 -->
    <delete id="deleteBuilding">
        DELETE FROM building
        WHERE building_id = #{buildingId}
    </delete>

    <!-- 건물 존재 여부 확인 -->
    <select id="isBuildingExists" resultType="java.lang.Boolean">
        SELECT COUNT(*) > 0
        FROM building
        WHERE building_id = #{buildingId}
    </select>

    <!-- building_id로 매물 정보 조회 -->
    <select id="getBuildingById" resultType="bjs.zangbu.building.vo.Building">
        SELECT *
        FROM building
        WHERE building_id = #{buildingId}
    </select>

    <!-- 현재 가격 조회 -->
    <select id="selectCurrentPrice" resultType="int">
        SELECT price FROM building WHERE building_id = #{buildingId}
    </select>

    <!-- 필터 조건에 맞는 매물 목록 조회 (평점 포함 + 페이징) -->
    <select id="selectFilteredBuildings" resultType="map">
        SELECT
        b.building_id,
        b.building_name,
        b.price,
        IFNULL(r.avg_rank, 0) AS rank_average
        FROM building b
        LEFT JOIN (
        SELECT building_id, AVG(rank) AS avg_rank
        FROM review
        GROUP BY building_id
        ) r ON b.building_id = r.building_id
        <where>
            <if test="buildingName != null and buildingName != ''">
                AND b.building_name LIKE CONCAT('%', #{buildingName}, '%')
            </if>
            <if test="saleType != null and saleType != ''">
                AND b.sale_type = #{saleType}
            </if>
            <if test="startPrice != null">
                AND b.price &gt;= #{startPrice}
            </if>
            <if test="endPrice != null">
                AND b.price &lt;= #{endPrice}
            </if>
            <if test="propertyType != null and propertyType != ''">
                AND b.property_type = #{propertyType}
            </if>
        </where>
        ORDER BY b.created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 필터 조건에 맞는 매물 총 개수 조회 -->
    <select id="countFilteredBuildings" resultType="long">
        SELECT COUNT(*)
        FROM building
        <where>
            <if test="buildingName != null and buildingName != ''">
                AND building_name LIKE CONCAT('%', #{buildingName}, '%')
            </if>
            <if test="saleType != null and saleType != ''">
                AND sale_type = #{saleType}
            </if>
            <if test="startPrice != null">
                AND price &gt;= #{startPrice}
            </if>
            <if test="endPrice != null">
                AND price &lt;= #{endPrice}
            </if>
            <if test="propertyType != null and propertyType != ''">
                AND property_type = #{propertyType}
            </if>
        </where>
    </select>

</mapper>
