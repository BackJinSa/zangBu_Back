<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bjs.zangbu.building.mapper.BuildingMapper">

    <!--
        신규 매물 등록
        @param sellerNickname, saleType, price, deposit, buildingName, sellerType, propertyType,
               moveDate, infoOneline, infoBuilding, contactName, contactPhone, facility, size, memberId, complexId
        @return 없음 (INSERT)
    -->
    <insert id="createBuilding">
        INSERT INTO building (
            seller_nickname, sale_type, price, deposit, bookmark_count, created_at,
            building_name, seller_type, property_type, move_date, info_oneline,
            info_building, contact_name, contact_phone, facility, size, member_id, complex_id
        ) VALUES (
                     #{sellerNickname}, #{saleType}, #{price}, #{deposit}, 0, NOW(),
                     #{buildingName}, #{sellerType}, #{propertyType}, #{moveDate}, #{infoOneline},
                     #{infoBuilding}, #{contactName}, #{contactPhone}, #{facility}, #{size}, #{memberId}, #{complexId}
                 )
    </insert>

    <!--
        북마크 수 증가
        @param buildingId
        @return 없음 (UPDATE)
    -->
    <update id="incrementBookmarkCount">
        UPDATE building
        SET bookmark_count = IFNULL(bookmark_count, 0) + 1
        WHERE building_id = #{buildingId}
    </update>

    <!--
        북마크 수 감소 (0 미만은 되지 않도록 처리)
        @param buildingId
        @return 없음 (UPDATE)
    -->
    <update id="decrementBookmarkCount">
        UPDATE building
        SET bookmark_count = IFNULL(bookmark_count, 0) - 1
        WHERE building_id = #{buildingId} AND bookmark_count > 0
    </update>

    <!--
        매물 정보 수정
        @param building (수정할 필드만 값 채움), memberId (소유자 확인)
        @return 없음 (UPDATE)
    -->
    <update id="updateBuilding">
        UPDATE building
        <set>
            <if test="building.sellerNickname != null">seller_nickname = #{building.sellerNickname},</if>
            <if test="building.saleType != null">sale_type = #{building.saleType},</if>
            <if test="building.price != null">price = #{building.price},</if>
            <if test="building.deposit != null">deposit = #{building.deposit},</if>
            <if test="building.buildingName != null">building_name = #{building.buildingName},</if>
            <if test="building.sellerType != null">seller_type = #{building.sellerType},</if>
            <if test="building.propertyType != null">property_type = #{building.propertyType},</if>
            <if test="building.moveDate != null">move_date = #{building.moveDate},</if>
            <if test="building.infoOneline != null">info_oneline = #{building.infoOneline},</if>
            <if test="building.infoBuilding != null">info_building = #{building.infoBuilding},</if>
            <if test="building.contactName != null">contact_name = #{building.contactName},</if>
            <if test="building.contactPhone != null">contact_phone = #{building.contactPhone},</if>
            <if test="building.facility != null">facility = #{building.facility},</if>
            <if test="building.size != null">size = #{building.size},</if>
        </set>
        WHERE building_id = #{building.buildingId} AND member_id = #{memberId}
    </update>

    <!--
        매물 삭제
        @param buildingId
        @return 없음 (DELETE)
    -->
    <delete id="deleteBuilding">
        DELETE FROM building
        WHERE building_id = #{buildingId}
    </delete>

    <!--
        매물 존재 여부 확인
        @param buildingId
        @return Boolean (true: 존재함, false: 존재하지 않음)
    -->
    <select id="isBuildingExists" resultType="java.lang.Boolean">
        SELECT COUNT(*) > 0
        FROM building
        WHERE building_id = #{buildingId}
    </select>

    <!--
        매물 상세 조회
        @param buildingId
        @return Building VO 객체
    -->
    <select id="getBuildingById" resultType="bjs.zangbu.building.vo.Building">
        SELECT *
        FROM building
        WHERE building_id = #{buildingId}
    </select>

    <!--
        매물 가격 조회
        @param buildingId
        @return int (가격)
    -->
    <select id="selectCurrentPrice" resultType="int">
        SELECT price
        FROM building
        WHERE building_id = #{buildingId}
    </select>

    <!--
        조건 필터링된 매물 목록 조회 (리스트)
        @param buildingName, saleType, startPrice, endPrice, startSize, endSize, propertyType
        @return FilteredResponse.Filtered DTO 목록
    -->
    <select id="selectFilteredBuildings"
            resultType="bjs.zangbu.building.dto.response.BuildingResponse$FilteredResponse$Filtered">
        SELECT
        b.building_id,
        b.building_name,
        b.price,
        b.size,
        IFNULL(r.avg_rank, 0) AS rank_average,
        FALSE AS is_bookMarked
        FROM building b
        LEFT JOIN (
        SELECT building_id, AVG(`rank`) AS avg_rank
        FROM review
        GROUP BY building_id
        ) r ON b.building_id = r.building_id
        <where>
            <if test="buildingName != null and buildingName != ''">
                AND b.building_name LIKE CONCAT('%', #{buildingName}, '%')
            </if>
            <if test="saleType != null and saleType != ''">
                AND b.sale_type = #{saleType}
            </if>
            <if test="startPrice != null">
                AND b.price &gt;= #{startPrice}
            </if>
            <if test="endPrice != null">
                AND b.price &lt;= #{endPrice}
            </if>
            <if test="propertyType != null and propertyType != ''">
                AND b.property_type = #{propertyType}
            </if>
        </where>
        ORDER BY b.created_at DESC
    </select>

    <!--
        조건 필터링된 매물 개수 조회
        @param buildingName, saleType, startPrice, endPrice, startSize, endSize, propertyType
        @return long (매물 개수)
    -->
    <select id="countFilteredBuildings" resultType="long">
        SELECT COUNT(*)
        FROM building b
        <where>
            <if test="buildingName != null and buildingName != ''">
                AND b.building_name LIKE CONCAT('%', #{buildingName}, '%')
            </if>
            <if test="saleType != null and saleType != ''">
                AND b.sale_type = #{saleType}
            </if>
            <if test="startPrice != null">
                AND b.price &gt;= #{startPrice}
            </if>
            <if test="endPrice != null">
                AND b.price &lt;= #{endPrice}
            </if>
            <if test="propertyType != null and propertyType != ''">
                AND b.property_type = #{propertyType}
            </if>
        </where>
    </select>

    <!--
        리뷰 수 기준 상위 3개 매물 조회
        @param memberId (북마크 여부 체크)
        @return MainResponse.BuildingInfo DTO 목록
    -->
    <select id="selectTopReviewedBuildings" resultType="bjs.zangbu.building.dto.response.MainResponse$BuildingInfo">
        SELECT
            b.building_id AS buildingId,
            b.price,
            b.building_name AS buildingName,
            b.size,
            MIN(il.image_url) AS imageUrl,
            IFNULL(AVG(r.rank), 0) AS `rank`,
            CASE WHEN bm.member_id IS NOT NULL THEN TRUE ELSE FALSE END AS isBookmarked
        FROM building b
                 LEFT JOIN review r ON b.building_id = r.building_id
                 LEFT JOIN bookmark bm ON b.building_id = bm.building_id AND bm.member_id = #{memberId}
                 LEFT JOIN image_list il ON b.building_id = il.building_id
        GROUP BY b.building_id, b.price, b.building_name, b.size
        ORDER BY COUNT(r.review_id) DESC
            LIMIT 3
    </select>

    <!--
        북마크 수 기준 상위 3개 매물 조회
        @param memberId (북마크 여부 체크)
        @return MainResponse.BuildingInfo DTO 목록
    -->
    <select id="selectTopLikedBuildings" resultType="bjs.zangbu.building.dto.response.MainResponse$BuildingInfo">
        SELECT
            b.building_id AS buildingId,
            b.price,
            b.building_name AS buildingName,
            b.size,
            MIN(il.image_url) AS imageUrl,
            IFNULL(AVG(r.rank), 0) AS `rank`,
            CASE WHEN bm.member_id IS NOT NULL THEN TRUE ELSE FALSE END AS isBookmarked
        FROM building b
                 LEFT JOIN bookmark bm ON b.building_id = bm.building_id AND bm.member_id = #{memberId}
                 LEFT JOIN review r ON b.building_id = r.building_id
                 LEFT JOIN image_list il ON b.building_id = il.building_id
        GROUP BY b.building_id, b.price, b.building_name, b.size
        ORDER BY b.bookmark_count DESC
            LIMIT 3
    </select>

    <!--
        최신 등록 매물 3개 조회
        @param memberId (북마크 여부 체크)
        @return MainResponse.BuildingInfo DTO 목록
    -->
    <select id="selectNewRooms" resultType="bjs.zangbu.building.dto.response.MainResponse$BuildingInfo">
        SELECT
            b.building_id AS buildingId,
            b.price,
            b.building_name AS buildingName,
            b.size,
            MIN(il.image_url) AS imageUrl,
            IFNULL(AVG(r.rank), 0) AS `rank`,
            CASE WHEN bm.member_id IS NOT NULL THEN TRUE ELSE FALSE END AS isBookmarked
        FROM building b
                 LEFT JOIN bookmark bm ON b.building_id = bm.building_id AND bm.member_id = #{memberId}
                 LEFT JOIN review r ON b.building_id = r.building_id
                 LEFT JOIN image_list il ON b.building_id = il.building_id
        GROUP BY b.building_id, b.price, b.building_name, b.size
        ORDER BY b.created_at DESC
            LIMIT 3
    </select>

    <select id="selectBuildingNameById" parameterType="long" resultType="string">
        SELECT building_name
        FROM building
        WHERE building_id = #{buildingId}
    </select>

    <!--
        보증금 조회
        @param buildingId
        @return Integer (보증금)
    -->
    <select id="getDeposit" resultType="java.lang.Integer">
        SELECT deposit
        FROM building
        WHERE building_id = #{buildingId}
    </select>

    <!--
        마지막 INSERT된 ID 조회 (Auto Increment)
        @return long (마지막 등록된 PK)
    -->
    <select id="selectLastInsertId" resultType="long">
        SELECT LAST_INSERT_ID()
    </select>

</mapper>
