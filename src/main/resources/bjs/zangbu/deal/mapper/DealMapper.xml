<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bjs.zangbu.deal.mapper.DealMapper">

  <!-- 거래 신규 생성 -->
  <insert id="createDeal" useGeneratedKeys="true" keyProperty="result.dealId">
    INSERT INTO deal(chat_room_id,
                     building_id,
                     member_id,
                     complex_id,
                     status,
                     created_at)
    SELECT cr.chat_room_id,
           cr.building_id,
           cr.member_id,
           cr.complex_id,
           'BEFORE_TRANSACTION',
           NOW()
    FROM chat_room cr
    WHERE cr.chat_room_id = #{chatRoomId}

  </insert>

  <!-- Deal.status 업데이트 -->
  <update id="patchStatus" parameterType="bjs.zangbu.deal.dto.request.DealRequest$Status">
    UPDATE deal
    SET status = #{status}
    WHERE deal_id = #{dealId}
  </update>

  <!-- Deal 삭제 -->
  <delete id="deleteDealById" parameterType="java.lang.Long">
    DELETE
    FROM deal
    WHERE deal_id = #{dealId}
  </delete>

  <!-- 거래중인 list 모두 조회 -->
  <select id="getAllWaitingList" resultMap="DealWithChatRoomMap">
    SELECT d.deal_id,
           d.chat_room_id,
           d.building_id,
           d.status,
           d.created_at,
           d.complex_id,

           b.price,
           b.building_name,
           b.property_type,
           b.sale_type,
           cl.address,

           c.consumer_nickname,
           c.seller_nickname
--     ChatRoom, Building, Complex join
    FROM deal d
           JOIN chat_room c ON d.chat_room_id = c.chat_room_id
           JOIN building b ON d.building_id = b.building_id
           JOIN complex_list cl ON d.complex_id = cl.complex_id
    WHERE d.member_id = #{memberId}
      AND d.status != 'BEFORE_TRANSACTION'
    ORDER BY d.created_at DESC
  </select>

  <!-- Deal.status 가져오기 -->
  <select id="getStatusByDealId" resultType="java.lang.String">
    SELECT status
    FROM deal
    WHERE deal_id = #{dealId}
  </select>

  <!-- 구매중인 list 모두 조회 -->
  <select id="getPurchaseWaitingList"
    resultType="bjs.zangbu.deal.dto.join.DealWithChatRoom" resultMap="DealWithChatRoomMap">
    SELECT d.deal_id,
           d.chat_room_id,
           d.building_id,
           d.status,
           d.created_at,
           d.complex_id,

           b.price,
           b.building_name,
           b.property_type,
           b.sale_type,

           cl.address,

           c.consumer_nickname,
           c.seller_nickname
--     ChatRoom, Building, Complex join
    FROM deal d
           JOIN chat_room c ON d.chat_room_id = c.chat_room_id
           JOIN building b ON d.building_id = b.building_id
           JOIN complex_list cl ON d.complex_id = cl.complex_id
    WHERE c.consumer_nickname = #{nickname}
      AND d.member_id = #{memberId}
      AND d.status != 'BEFORE_TRANSACTION'
    ORDER BY d.created_at DESC
  </select>

  <!-- 판매중인 list 모두 조회-->
  <select id="getOnSaleWaitingList" resultType="bjs.zangbu.deal.dto.join.DealWithChatRoom"
    resultMap="DealWithChatRoomMap">
    SELECT d.deal_id,
           d.chat_room_id,
           d.building_id,
           d.status,
           d.created_at,
           d.complex_id,

           b.price,
           b.building_name,
           b.property_type,
           b.sale_type,

           cl.address,

           c.consumer_nickname,
           c.seller_nickname
--     ChatRoom, Building, Complex join
    FROM deal d
           JOIN chat_room c ON d.chat_room_id = c.chat_room_id
           JOIN building b ON d.building_id = b.building_id
           JOIN complex_list cl ON d.complex_id = cl.complex_id
    WHERE c.seller_nickname = #{nickname}
      AND b.member_id = #{memberId}
      AND d.status != 'BEFORE_TRANSACTION'
    ORDER BY d.created_at DESC

  </select>

  <!-- getWaitingDealsWithChatRoom join 한 결과값 -->
  <resultMap id="DealWithChatRoomMap" type="bjs.zangbu.deal.dto.join.DealWithChatRoom">
    <id property="dealId" column="deal_id"/>
    <result property="chatRoomId" column="chat_room_id"/>
    <result property="buildingId" column="building_id"/>
    <result property="status" column="status"/>
    <result property="createdAt" column="created_at"/>

    <result property="price" column="price"/>
    <result property="buildingName" column="building_name"/>
    <result property="propertyType" column="property_type"/>
    <result property="saleType" column="sale_type"/>
    <result property="address" column="address"/>

    <result property="consumerNickname" column="consumer_nickname"/>
    <result property="sellerNickname" column="seller_nickname"/>
  </resultMap>

  <!--표준계약서 xml 코드 -->
  <select id="findWithType"
    parameterType="long"
    resultMap="DealWithSaleTypeMap">

    SELECT d.deal_id,
           d.status,
           d.member_id,
           d.building_id,
           b.sale_type
    FROM deal d
           JOIN building b ON b.building_id = d.building_id
    WHERE d.deal_id = #{dealId}

  </select>
  <!-- 결과 매핑 -->
  <resultMap id="DealWithSaleTypeMap"
    type="bjs.zangbu.deal.dto.join.DealWithSaleType">

    <id property="dealId" column="deal_id"/>
    <result property="status"
      column="status"
      javaType="bjs.zangbu.deal.vo.DealEnum"/>
    <result property="memberId" column="member_id"/>
    <result property="buildingId" column="building_id"/>
    <result property="saleType"
      column="sale_type"
      javaType="bjs.zangbu.notification.vo.SaleType"/>
  </resultMap>

  <!-- 오늘 거래된 매물들의 building_id 조회 -->
  <select id="selectTodayTradedBuildingIds" resultType="java.lang.Long">
    SELECT DISTINCT building_id
    FROM deal
    WHERE DATE (created_at) = CURDATE()
  </select>

  <!-- dealId로 buildingId 조회 -->
  <select id="getBuildingIdByDealId" resultType="java.lang.Long">
    SELECT building_id
    FROM deal
    WHERE deal_id = #{dealId}
  </select>
  <!-- dealId로 complexId 조회 -->
  <select id="getComplexIdByDealId" resultType="java.lang.Long">
    SELECT complex_id
    FROM deal
    WHERE deal_id = #{dealId}
  </select>

  <!--    등기부등본 조회에 필요한 정보 가져오기 -->
  <select id="getEstateRegistrationRequest"
    resultType="bjs.zangbu.deal.dto.request.EstateRegistrationRequest">
    SELECT b.building_id AS buildingId, -- ★ DTO 필드 추가 반영
           m.phone       AS phone,
           m.birth       AS birth,
           cl.sido       AS sido,
           cl.address    AS address,    -- 필요 시 CONCAT으로 도로명 주소 구성
           cl.sigungu    AS sigungu,
           cl.dong       AS dong,
           cl.ho         AS ho,
           cl.roadName   AS roadName
    FROM building b
           JOIN member m ON m.member_id = b.member_id
           JOIN complex_list cl ON cl.complex_id = b.complex_id
    WHERE b.building_id = #{buildingId}
  </select>
  <!--    건축물대장 조회에 필요한 정보 가져오기 -->
  <select id="getDocumentInfo"
    resultType="bjs.zangbu.deal.dto.join.DealDocumentInfo">
    SELECT b.building_id,
           m.identity,
           m.birth,
           m.phone,
           m.name,
           m.telecom,
           cl.address,
           cl.zonecode,
           cl.dong,
           cl.ho
    FROM building b
           JOIN member m ON m.member_id = b.member_id
           JOIN complex_list cl ON cl.complex_id = b.complex_id
    WHERE b.building_id = #{buildingId}
  </select>


</mapper>
